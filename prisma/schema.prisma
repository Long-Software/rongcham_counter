// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Business {
  id              Int     @id @default(autoincrement())
  email           String  @unique
  name            String?
  industry        String?
  branch          String?
  subscription_id Int
  // @@index([authorId, createdAt])

  @@map("businesses")
}

model Counter {
  id                    Int     @id @default(autoincrement())
  counter_number        Int
  access_code           String
  business_token        String
  status                Boolean @default(false)
  attendee_id           Int
  main_category_id      Int
  secondary_category_id Int

  @@map("counters")
}

model Attendee {
  id             Int    @id @default(autoincrement())
  pin            String
  name           String
  business_token String

  @@map("attendees")
}

model Category {
  id             Int     @id @default(autoincrement())
  name           String
  acronym        String
  status         Boolean @default(false)
  business_token String

  @@map("categories")
}

model Queue {
  id             Int       @id @default(autoincrement())
  number         Int
  start_time     DateTime?
  end_time       DateTime?
  category_id    Int
  business_token String

  @@map("queues")
}

model UserQueues {
  id       Int @id @default(autoincrement())
  queue_id Int
  user_id  Int

  @@map("user_queues")
}

model User {
  id           Int      @id @default(autoincrement())
  firstname    String
  lastname     String
  gender       String   @default("Male")
  dob          DateTime @default(now())
  img_url      String   @default("")
  phone_number String

  @@map("users")
}

model QueueHistory {
  id          Int    @id @default(autoincrement())
  status      String
  counter_id  Int
  attendee_id Int
  queue_id    Int

  @@map("queue_histories")
}

model Feedback {
  id               Int    @id @default(autoincrement())
  description      String
  rating           Int
  user_id          Int
  queue_history_id Int

  @@map("feedbacks")
}

model Notification {
  id          Int    @id @default(autoincrement())
  type        String
  description String
  user_id     Int

  @@map("notifications")
}

model Subscription {
  id             Int     @id @default(autoincrement())
  name           String
  price          Float
  counter_limit  Int     @default(1)
  category_limit Int     @default(1)
  description    String?
}
